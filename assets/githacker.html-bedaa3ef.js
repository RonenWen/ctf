import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as i,e as t}from"./app-fbb2e0f2.js";const s="/tools/githacker/ctfhubWebGitLog.png",r="/tools/githacker/ctfhubWebGitLog2.png",n="/tools/githacker/ctfhubWebGitLog3.png",l="/tools/githacker/ctfhubWebGitLog4.png",c="/tools/githacker/gitcommand.png",d={},o=t(`<h1 id="githacker-含git泄露的题型" tabindex="-1"><a class="header-anchor" href="#githacker-含git泄露的题型" aria-hidden="true">#</a> GitHacker(含git泄露的题型)</h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>使用kali linux安装GitHacker: pip3 install GitHacker, 安装完后即可使用githacker命令</p><h2 id="用法" tabindex="-1"><a class="header-anchor" href="#用法" aria-hidden="true">#</a> 用法</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>githacker <span class="token parameter variable">--url</span> <span class="token operator">&lt;</span>网站地址<span class="token operator">&gt;</span> --output-folder <span class="token operator">&lt;</span>输出文件夹<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>githacker <span class="token parameter variable">--url</span> http://challenge-ac6c09cab4c14575.sandbox.ctfhub.com:10800/ --output-folder <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="例题1-【ctfhub-web-信息泄露-git-log】" tabindex="-1"><a class="header-anchor" href="#例题1-【ctfhub-web-信息泄露-git-log】" aria-hidden="true">#</a> 例题1 【CTFHub-web-信息泄露-git-log】</h2><p>由题目可知，这个是一个git信息泄露，并且题目的名称是log，那就意味着可以考虑使用git log查看相关信息<br> 先用工具扫一下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>githacker <span class="token parameter variable">--url</span> 具体的url --output-folder 输出的文件夹
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>提示说有结果，那就进入这个文件夹，执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+s+`" alt="gitlog执行结果" tabindex="0" loading="lazy"><figcaption>gitlog执行结果</figcaption></figure><p>看来我们需要回退一个版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>使用git reset <span class="token parameter variable">--hard</span> 72d89d49d1d253a8a2f472ac8384dbee7898ac86
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后查看当前的目录，会发现多了一个txt文件，那么这个文件就应该是flag了<br><img src="`+r+'" alt="得到flag" loading="lazy"></p><h2 id="例题2-【ctfhub-web-信息泄露-git-stash】" tabindex="-1"><a class="header-anchor" href="#例题2-【ctfhub-web-信息泄露-git-stash】" aria-hidden="true">#</a> 例题2 【CTFHub-web-信息泄露-git-stash】</h2><p>依旧是直接上工具扫描，然后看日志<br> 发现和刚刚差不多<br><img src="'+n+'" alt="例题2gitlog" loading="lazy"><br> 这里可以考虑回退上一版本，但是也可以用git stash pop去把删除的文件还原回来<br><img src="'+l+'" alt="看到新增了一个txt" loading="lazy"><br> 直接cat一下，就出来了</p><h2 id="常用git命令" tabindex="-1"><a class="header-anchor" href="#常用git命令" aria-hidden="true">#</a> 常用git命令</h2><figure><img src="'+c+'" alt="常用git命令" tabindex="0" loading="lazy"><figcaption>常用git命令</figcaption></figure>',19),g=[o];function h(p,b){return e(),i("div",null,g)}const f=a(d,[["render",h],["__file","githacker.html.vue"]]);export{f as default};
